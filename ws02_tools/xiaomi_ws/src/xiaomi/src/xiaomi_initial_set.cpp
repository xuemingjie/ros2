#include "xiaomi/xiaomi.h"
#include <vector>


void initinalXiaomiSets (xiaomi_set& xiaomi_nox,int x)
{

    if(x == 1){
    xiaomi_nox.At_mode.data={0x41, 0x54, 0x2B, 0x41, 0x54, 0x0D, 0x0A};
    xiaomi_nox.mode_set_0.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x05, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.mode_set_1.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x05, 0x70, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.mode_set_2.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x05, 0x70, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.mode_set_3.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x05, 0x70, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.able.data =       {0x41, 0x54,0x18, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.terminal.data =   {0x41, 0x54,0x20, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.zero.data =       {0x41, 0x54,0x30, 0x00, 0x00, 0x0c, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};

    }
    else if (x==2)
    {
    xiaomi_nox.At_mode.data={0x41, 0x54, 0x2B, 0x41, 0x54, 0x0D, 0x0A};
    xiaomi_nox.mode_set_0.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x05, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.mode_set_1.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x05, 0x70, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.mode_set_2.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x05, 0x70, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.mode_set_3.data = {0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x05, 0x70, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.able.data =       {0x41, 0x54,0x18, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.terminal.data =   {0x41, 0x54,0x20, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    xiaomi_nox.zero.data =       {0x41, 0x54,0x30, 0x00, 0x00, 0x14, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a};
    }
    
}


std_msgs::msg::UInt8MultiArray convertFloatToHexVector(float arguments)
{

    FloatConverter converter;
    converter.floatValue = arguments;
    std_msgs::msg::UInt8MultiArray set;
    // 将联合的字节序列存储到vector
    for (size_t i = 0; i < 4; ++i) {

        // set.data[i] = converter.byteValue[i];
        
        set.data.push_back(converter.byteValue[i]);
    }
    return set;





}

void  mode_set(int id,float loc_ref,float limit_sqd, float limit_cur ,std_msgs::msg::UInt8MultiArray &loc_ref_set,std_msgs::msg::UInt8MultiArray &limit_sqd_set,std_msgs::msg::UInt8MultiArray &limit_cur_set)//位置模式参数设置函数
{

if(id == 1)
{

     std_msgs::msg::UInt8MultiArray index ;
    std_msgs::msg::UInt8MultiArray end; 
    end.data = {0x0d, 0x0a};
    std_msgs::msg::UInt8MultiArray loc_set;
    std_msgs::msg::UInt8MultiArray  cur_set ;
    std_msgs::msg::UInt8MultiArray  speed_set ;
    loc_set = convertFloatToHexVector(loc_ref);
    speed_set = convertFloatToHexVector(limit_sqd);
    
    cur_set = convertFloatToHexVector(limit_cur);

    index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x16, 0x70, 0x00, 0x00} ;//7016,位置模式角度
    loc_ref_set = index + loc_set + end;


    index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x17, 0x70, 0x00, 0x00} ;//7017,位置模式速度

    limit_sqd_set = index + speed_set + end;


    index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x18, 0x70, 0x00, 0x00} ;//7018,位置模式电流

    limit_cur_set = index + cur_set+ end;



}

else if (id == 2)
{

    std_msgs::msg::UInt8MultiArray index ;
    std_msgs::msg::UInt8MultiArray end; 
    end.data = {0x0d, 0x0a};
    std_msgs::msg::UInt8MultiArray loc_set;
    std_msgs::msg::UInt8MultiArray  cur_set ;
    std_msgs::msg::UInt8MultiArray  speed_set ;
    loc_set = convertFloatToHexVector(loc_ref);
    speed_set = convertFloatToHexVector(limit_sqd);
    
    cur_set = convertFloatToHexVector(limit_cur);

    index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x16, 0x70, 0x00, 0x00} ;//7016,位置模式角度
    loc_ref_set = index + loc_set + end;


    index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x17, 0x70, 0x00, 0x00} ;//7017,位置模式速度

    limit_sqd_set = index + speed_set+ end;


    index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x18, 0x70, 0x00, 0x00} ;//7018,位置模式电流

    limit_cur_set = index + cur_set+ end;



}







}


void  mode_set(int id,float sqd_ref, float limit_cur ,std_msgs::msg::UInt8MultiArray &sqd_ref_set,std_msgs::msg::UInt8MultiArray &limit_cur_set)//速度模式参数设置函数
{


if(id == 1)
{
    //设置速度

        std_msgs::msg::UInt8MultiArray index ;
        std_msgs::msg::UInt8MultiArray end; 
        end.data = {0x0d, 0x0a};
        std_msgs::msg::UInt8MultiArray speed_set;
        std_msgs::msg::UInt8MultiArray  cur_set ;
        speed_set = convertFloatToHexVector(sqd_ref);
        cur_set= convertFloatToHexVector(limit_cur);
        
        index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x0a, 0x70, 0x00, 0x00};// 700A
        sqd_ref_set = index +  speed_set  + end;
//设置电流

        index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x18, 0x70, 0x00, 0x00};// 7018
        limit_cur_set = index +  cur_set  + end;
        
}

else if (id == 2)
{
    
        std_msgs::msg::UInt8MultiArray index ;
        std_msgs::msg::UInt8MultiArray end; 
        end.data = {0x0d, 0x0a};
        std_msgs::msg::UInt8MultiArray speed_set;
        std_msgs::msg::UInt8MultiArray  cur_set ;
        speed_set = convertFloatToHexVector(sqd_ref);
        cur_set= convertFloatToHexVector(limit_cur);
        index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x0a, 0x70, 0x00,0x00};// 700A
        sqd_ref_set = index +  speed_set  + end;


        index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x18, 0x70,0x00,0x00};// 7018
        limit_cur_set = index +  cur_set  + end;
        
    
}




}



/*
void  mode_set(int id,float iq_ref,std_msgs::msg::UInt8MultiArray &iq_ref_set)
{

if(id == 1)
{
        std_msgs::msg::UInt8MultiArray index ;
        std_msgs::msg::UInt8MultiArray end;
        end.data = {0x0d, 0x0a};
        convertFloatToHexVector(iq_ref,iq_ref_set);
        index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x0c, 0x08, 0x06, 0x70, 0x00,0x00};// 7006
        iq_ref_set =index +  iq_ref_set + end;



}
else if (id == 2)
{

        std_msgs::msg::UInt8MultiArray index ;
        std_msgs::msg::UInt8MultiArray end;
        end.data = {0x0d, 0x0a};
        convertFloatToHexVector(iq_ref,iq_ref_set);
        index .data ={0x41, 0x54,0x90, 0x00, 0x00, 0x14, 0x08, 0x06, 0x70, 0x00,0x00};// 7006
        iq_ref_set =index +  iq_ref_set + end;



}




}

*/


std_msgs::msg::UInt8MultiArray operator+(const std_msgs::msg::UInt8MultiArray &a, const std_msgs::msg::UInt8MultiArray &b) //拼接重载加法
{
    std_msgs::msg::UInt8MultiArray result;
    result.data = a.data;
    result.data.insert(result.data.end(), b.data.begin(), b.data.end());
    return result;
}
